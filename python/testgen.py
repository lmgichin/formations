# -*- coding: utf-8 -*-
__author__ = 'lucio'

# ######################################################################################################################
# définition d'un itérateur
# ######################################################################################################################


class MyRange:

    def __init__(self, low, high):
        self.current = low
        self.high = high

    def __iter__(self):
        return self

    def next(self):

        if self.current <= self.high:
            self.current += 1
            return self.current - 1
        else:
            raise StopIteration

# ######################################################################################################################
# définition d'un générateur
# ######################################################################################################################


def my_gen(current, high):

    while current <= high:
        yield current
        current += 1


# ######################################################################################################################
# on teste...
# ######################################################################################################################

if __name__ == '__main__':

    for i in MyRange(1,10):
        print i

    for j in my_gen(1,10):
        print j